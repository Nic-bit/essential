@PACKAGE_INIT@

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")

include(CMakeFindDependencyMacro)

set(GFLAGS_USE_TARGET_NAMESPACE @GFLAGS_USE_TARGET_NAMESPACE@)

set(EA_ROOT "/opt/EA/inf/")
list(APPEND CMAKE_PREFIX_PATH ${EA_ROOT})

if(@WITH_JEMALLOC@)
  find_dependency(JeMalloc)
endif()

set(THIRDPARTY_LIBS)
set(THIRDPARTY_INCLUDE_DIRS)
if(@WITH_GFLAGS@)
  find_path(GFLAGS_INCLUDE_DIR gflags/gflags.h PATHS ${EA_ROOT})
  find_library(GFLAGS_STATIC_LIB NAMES libgflags.a PATHS ${EA_ROOT})
  if(NOT GFLAGS_INCLUDE_DIR OR NOT GFLAGS_STATIC_LIB)
    message(FATAL_ERROR "GFLAGS not found")
  endif ()
  list(APPEND THIRDPARTY_LIBS ${GFLAGS_STATIC_LIB})
  list(APPEND THIRDPARTY_INCLUDE_DIRS ${GFLAGS_INCLUDE_DIR})
  set(GFLAGS_LIB ${GFLAGS_STATIC_LIB})
  add_definitions(-DGFLAGS=1)
endif()

if(@WITH_SNAPPY@)
  find_path(SNAPPY_INCLUDE_DIR snappy.h PATHS ${EA_ROOT})
  find_library(SNAPPY_STATIC_LIB NAMES libsnappy.a PATHS ${EA_ROOT})
  if(NOT SNAPPY_INCLUDE_DIR OR NOT SNAPPY_STATIC_LIB)
    message(FATAL_ERROR "SNAPPY not found")
  endif ()
  list(APPEND THIRDPARTY_LIBS ${SNAPPY_STATIC_LIB})
    list(APPEND THIRDPARTY_INCLUDE_DIRS ${SNAPPY_INCLUDE_DIR})
endif()

if(@WITH_ZLIB@)
    find_path(ZLIB_INCLUDE_DIR zlib.h PATHS ${EA_ROOT})
    find_library(ZLIB_STATIC_LIB NAMES libz.a PATHS ${EA_ROOT})
    if(NOT ZLIB_INCLUDE_DIR OR NOT ZLIB_STATIC_LIB)
    message(FATAL_ERROR "ZLIB not found")
    endif ()
    list(APPEND THIRDPARTY_LIBS ${ZLIB_STATIC_LIB})
    list(APPEND THIRDPARTY_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})
endif()

if(@WITH_BZ2@)
  find_dependency(BZip2)
endif()

if(@WITH_LZ4@)
  find_path(LZ4_INCLUDE_DIR lz4.h PATHS ${EA_ROOT})
  find_library(LZ4_STATIC_LIB NAMES liblz4.a PATHS ${EA_ROOT})
  if(NOT LZ4_INCLUDE_DIR OR NOT LZ4_STATIC_LIB)
    message(FATAL_ERROR "LZ4 not found")
  endif ()
  list(APPEND THIRDPARTY_LIBS ${LZ4_STATIC_LIB})
    list(APPEND THIRDPARTY_INCLUDE_DIRS ${LZ4_INCLUDE_DIR})
endif()

if(@WITH_ZSTD@)
  find_path(ZSTD_INCLUDE_DIR zstd.h PATHS ${EA_ROOT})
  find_library(ZSTD_STATIC_LIB NAMES libzstd.a PATHS ${EA_ROOT})
  if(NOT ZSTD_INCLUDE_DIR OR NOT ZSTD_STATIC_LIB)
    message(FATAL_ERROR "ZSTD not found")
  endif ()
  list(APPEND THIRDPARTY_LIBS ${ZSTD_STATIC_LIB})
  add_definitions(-DZSTD)
endif()

if(@WITH_NUMA@)
  find_dependency(NUMA)
endif()

if(@WITH_TBB@)
  find_dependency(TBB)
endif()

find_dependency(Threads)

include("${CMAKE_CURRENT_LIST_DIR}/RocksDBTargets.cmake")
check_required_components(RocksDB)
